{"ast":null,"code":"import { getFeatureFlags } from \"../Api-client\";\nexport let Actions;\n\n(function (Actions) {\n  Actions[\"GET_FEATURE_FLAGS\"] = \"RECEIVE_FEATURE_FLAGS\";\n})(Actions || (Actions = {}));\n\nconst initialState = {\n  featureFlags: {}\n};\nexport default function featureFlagsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Actions.GET_FEATURE_FLAGS:\n      return { ...state,\n        featureFlags: action.featureFlags\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nconst mapper = array => {\n  return array.reduce((a, v) => {\n    return {\n      [v.name]: v.value\n    };\n  }, {});\n};\n\nexport const fetchFeatureFlags = () => {\n  return async dispatch => {\n    try {\n      const featureFlags = await getFeatureFlags();\n      const mappedresult = mapper(featureFlags);\n      dispatch({\n        type: Actions.GET_FEATURE_FLAGS,\n        featureFlags: mappedresult\n      });\n    } catch (error) {\n      //TODO push to logging\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/anndreadrivdahl/Desktop/demo-app/src/Store/ui.ts"],"names":["getFeatureFlags","Actions","initialState","featureFlags","featureFlagsReducer","state","action","type","GET_FEATURE_FLAGS","mapper","array","reduce","a","v","name","value","fetchFeatureFlags","dispatch","mappedresult","error","console","log"],"mappings":"AACA,SAAuCA,eAAvC,QAA8D,eAA9D;AAEA,WAAYC,OAAZ;;WAAYA,O;AAAAA,EAAAA,O;GAAAA,O,KAAAA,O;;AAaZ,MAAMC,YAA+B,GAAG;AACtCC,EAAAA,YAAY,EAAE;AADwB,CAAxC;AAIA,eAAe,SAASC,mBAAT,GAGM;AAAA,MAFnBC,KAEmB,uEAFXH,YAEW;AAAA,MADnBI,MACmB;;AACnB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,OAAO,CAACO,iBAAb;AACE,aAAO,EACL,GAAGH,KADE;AAELF,QAAAA,YAAY,EAAEG,MAAM,CAACH;AAFhB,OAAP;;AAKF;AAAS;AACP,eAAOE,KAAP;AACD;AATH;AAWD;;AAED,MAAMI,MAAM,GAAIC,KAAD,IAAsD;AACnE,SAAOA,KAAK,CAACC,MAAN,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC5B,WAAO;AAAE,OAACA,CAAC,CAACC,IAAH,GAAUD,CAAC,CAACE;AAAd,KAAP;AACD,GAFM,EAEJ,EAFI,CAAP;AAGD,CAJD;;AAMA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACrC,SAAO,MAAOC,QAAP,IAAsC;AAC3C,QAAI;AACF,YAAMd,YAAY,GAAG,MAAMH,eAAe,EAA1C;AACA,YAAMkB,YAAY,GAAGT,MAAM,CAACN,YAAD,CAA3B;AAEAc,MAAAA,QAAQ,CAAC;AACPV,QAAAA,IAAI,EAAEN,OAAO,CAACO,iBADP;AAEPL,QAAAA,YAAY,EAAEe;AAFP,OAAD,CAAR;AAID,KARD,CAQE,OAAOC,KAAP,EAAmB;AACnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAbD;AAcD,CAfM","sourcesContent":["import { Dispatch } from \"redux\";\nimport { FeatureFlagDto, FeatureFlags, getFeatureFlags } from \"../Api-client\";\n\nexport enum Actions {\n  GET_FEATURE_FLAGS = \"RECEIVE_FEATURE_FLAGS\",\n}\n\nexport type Action = {\n  type: Actions.GET_FEATURE_FLAGS;\n  featureFlags: Record<string, boolean>;\n};\n//TODO add error and loading state\ntype FeatureFlagsState = {\n  featureFlags: Record<FeatureFlags, boolean | undefined>;\n};\n\nconst initialState: FeatureFlagsState = {\n  featureFlags: {} as Record<FeatureFlags, boolean | undefined>,\n};\n\nexport default function featureFlagsReducer(\n  state = initialState,\n  action: Action\n): FeatureFlagsState {\n  switch (action.type) {\n    case Actions.GET_FEATURE_FLAGS:\n      return {\n        ...state,\n        featureFlags: action.featureFlags,\n      };\n\n    default: {\n      return state;\n    }\n  }\n}\n\nconst mapper = (array: FeatureFlagDto[]): Record<string, boolean> => {\n  return array.reduce((a, v) => {\n    return { [v.name]: v.value };\n  }, {});\n};\n\nexport const fetchFeatureFlags = () => {\n  return async (dispatch: Dispatch<Action>) => {\n    try {\n      const featureFlags = await getFeatureFlags();\n      const mappedresult = mapper(featureFlags);\n\n      dispatch({\n        type: Actions.GET_FEATURE_FLAGS,\n        featureFlags: mappedresult,\n      });\n    } catch (error: any) {\n      //TODO push to logging\n      console.log(error);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}