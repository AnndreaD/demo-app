{"ast":null,"code":"import { getExhangeRates } from \"../Api-client\"; //TODO Move out types and interfaces\n//TODO write tests\n\nexport let Actions;\n\n(function (Actions) {\n  Actions[\"SET_INITIAL_DATA\"] = \"SET_INITIAL_DATA\";\n  Actions[\"SET_CONVERISON\"] = \"SET_CONVERISON\";\n  Actions[\"LOGG_HISTORY\"] = \"LOGG_HISTORY\";\n  Actions[\"SET_ERROR\"] = \"SET_ERROR\";\n})(Actions || (Actions = {}));\n\nconst initialState = {\n  data: {},\n  apiError: undefined,\n  converisionResult: 0,\n  history: []\n};\nexport default function exhangeRates() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Actions.SET_INITIAL_DATA:\n      {\n        return { ...state,\n          data: action.payload\n        };\n      }\n\n    case Actions.SET_CONVERISON:\n      {\n        return { ...state,\n          converisionResult: action.payload\n        };\n      }\n\n    case Actions.LOGG_HISTORY:\n      {\n        return { ...state,\n          history: [...state.history, action.payload]\n        };\n      }\n\n    default:\n      return state;\n  }\n}\nexport const getExhangeData = () => {\n  return async dispatch => {\n    try {\n      const data = await getExhangeRates();\n      const d = mapper(data);\n      dispatch({\n        type: Actions.SET_INITIAL_DATA,\n        payload: d\n      });\n    } catch (err) {\n      console.error(\"error: \", err);\n      dispatch({\n        type: Actions.SET_ERROR,\n        error: err === null || err === void 0 ? void 0 : err.toString()\n      });\n    }\n  };\n};\n\nconst mapper = array => {\n  const myMap = {};\n  array.forEach(obj => {\n    const dateString = obj[\"Date\"];\n    myMap[dateString] = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n      // Exclude empty keys\n      if (key !== \"\" && key !== \"Date\") {\n        // Exclude Currencies with no valid data\n        if (value !== \"N/A\") {\n          myMap[dateString][key] = value;\n        }\n      }\n    }\n  });\n  return myMap;\n};\n\nexport const setConversionResult = data => {\n  return async dispatch => {\n    const result = data.amount * data.fromRate / data.toRate;\n    const history = { ...data,\n      result\n    };\n    dispatch({\n      type: Actions.SET_CONVERISON,\n      payload: result\n    });\n    dispatch({\n      type: Actions.LOGG_HISTORY,\n      payload: history\n    });\n  };\n};","map":{"version":3,"sources":["/Users/anndreadrivdahl/Desktop/currency-converter/src/Store/exchangeRates.ts"],"names":["getExhangeRates","Actions","initialState","data","apiError","undefined","converisionResult","history","exhangeRates","state","action","type","SET_INITIAL_DATA","payload","SET_CONVERISON","LOGG_HISTORY","getExhangeData","dispatch","d","mapper","err","console","error","SET_ERROR","toString","array","myMap","forEach","obj","dateString","key","value","Object","entries","setConversionResult","result","amount","fromRate","toRate"],"mappings":"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","sourcesContent":["import { Dispatch } from \"react\";\nimport { getExhangeRates } from \"../Api-client\";\n\n//TODO Move out types and interfaces\n//TODO write tests\n\nexport enum Actions {\n  SET_INITIAL_DATA = \"SET_INITIAL_DATA\",\n  SET_CONVERISON = \"SET_CONVERISON\",\n  LOGG_HISTORY = \"LOGG_HISTORY\",\n  SET_ERROR = \"SET_ERROR\",\n}\n\nexport type Action =\n  | { type: Actions.SET_INITIAL_DATA; payload: any }\n  | { type: Actions.SET_CONVERISON; payload: number }\n  | { type: Actions.SET_ERROR; error: any }\n  | { type: Actions.LOGG_HISTORY; payload: LoggHistory };\n\nexport type ExchangeRateState = {\n  data: CurrencyIndexer;\n  apiError: any;\n  converisionResult: number;\n  history: LoggHistory[];\n};\n\nconst initialState: ExchangeRateState = {\n  data: {},\n  apiError: undefined,\n  converisionResult: 0,\n  history: [],\n};\n\nexport default function exhangeRates(\n  state = initialState,\n  action: Action\n): ExchangeRateState {\n  switch (action.type) {\n    case Actions.SET_INITIAL_DATA: {\n      return {\n        ...state,\n        data: action.payload,\n      };\n    }\n    case Actions.SET_CONVERISON: {\n      return {\n        ...state,\n        converisionResult: action.payload,\n      };\n    }\n    case Actions.LOGG_HISTORY: {\n      return {\n        ...state,\n        history: [...state.history, action.payload],\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport const getExhangeData = () => {\n  return async (dispatch: Dispatch<Action>) => {\n    try {\n      const data: Array<any> = await getExhangeRates();\n      const d = mapper(data);\n\n      dispatch({ type: Actions.SET_INITIAL_DATA, payload: d });\n    } catch (err: any) {\n      console.error(\"error: \", err);\n      dispatch({\n        type: Actions.SET_ERROR,\n        error: err?.toString(),\n      });\n    }\n  };\n};\n\nconst mapper = (array: Indexer[]) => {\n  const myMap: CurrencyIndexer = {};\n\n  array.forEach((obj) => {\n    const dateString = obj[\"Date\"];\n    myMap[dateString] = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n      // Exclude empty keys\n      if (key !== \"\" && key !== \"Date\") {\n        // Exclude Currencies with no valid data\n        if (value !== \"N/A\") {\n          myMap[dateString][key] = value;\n        }\n      }\n    }\n  });\n\n  return myMap;\n};\n\nexport const setConversionResult = (data: CurrencyConversion) => {\n  return async (dispatch: Dispatch<Action>) => {\n    const result = (data.amount * data.fromRate) / data.toRate;\n    const history = { ...data, result } as LoggHistory;\n    dispatch({ type: Actions.SET_CONVERISON, payload: result });\n    dispatch({ type: Actions.LOGG_HISTORY, payload: history });\n  };\n};\n\nexport interface CurrencyConversion {\n  fromCurrency: string;\n  fromRate: number;\n  toCurrency: string;\n  toRate: number;\n  date: string;\n  amount: number;\n}\n\nexport interface LoggHistory extends CurrencyConversion {\n  result: number;\n}\n\ntype Indexer<T = any> = Object & {\n  [key: string]: T;\n};\n\nexport type CurrencyIndexer = Indexer<Indexer<number>>;\n"]},"metadata":{},"sourceType":"module"}