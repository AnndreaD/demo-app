{"ast":null,"code":"var _jsxFileName = \"/Users/anndreadrivdahl/Desktop/currency-converter/src/Routes/CurrencyConverter.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getExhangeData, setConversionResult } from \"../Store/exchangeRates\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//TODO 1. Add validation on values\n//TODO 2. filter out selected currency from dropdown 1 in dropdown 2\n//TODO 3. cleaner rendering and component split\n//TODO 4. add loading state\n// TODO 5. styled components -> moe CSS out\nexport const CurrencyConverter = () => {\n  _s();\n\n  const data = useSelector(state => state.exhangeRates.data);\n  const logg = useSelector(state => state.exhangeRates.history);\n  const resultz = useSelector(state => state.exhangeRates.converisionResult);\n  const [valueToconvert, setValueToConvert] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [selectedCurrencyFrom, setSelecteCurrencyFrom] = useState(\"\");\n  const [selectedCurrencyTo, setSelecteCurrencyTo] = useState(\"\");\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getExhangeData());\n  }, [dispatch]);\n\n  const renderSelections = (object, selectLabel) => {\n    let list = [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"select\",\n      children: selectLabel\n    }, \"select\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)];\n\n    for (const [key, value] of Object.entries(object)) {\n      list.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: key,\n        children: key\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this));\n    }\n\n    return list;\n  };\n\n  const onConvert = () => {\n    dispatch(setConversionResult({\n      fromCurrency: selectedCurrencyFrom,\n      fromRate: data[selectedDate][selectedCurrencyFrom],\n      toCurrency: selectedCurrencyTo,\n      toRate: data[selectedDate][selectedCurrencyTo],\n      date: selectedDate,\n      amount: valueToconvert\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Currency converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: \"#f5ecff\",\n        margin: \"64px\",\n        borderRadius: \"16px\",\n        padding: \"24px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" 1. Select date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n        \"aria-label\": \"select-date\",\n        onChange: e => setSelectedDate(e.target.value.toString()),\n        children: renderSelections(data, \"Select date\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" 2. Select curriencies and amount to convert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-between\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"Currency1\",\n          style: {},\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Currency i have\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"number\",\n            placeholder: \"value\",\n            onChange: e => setValueToConvert(parseInt(e.target.value)),\n            value: valueToconvert\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), selectedDate && /*#__PURE__*/_jsxDEV(Form.Select, {\n            \"aria-label\": \"select-currency-from\",\n            value: selectedCurrencyFrom,\n            onChange: e => setSelecteCurrencyFrom(e.target.value.toString()),\n            children: renderSelections(data[selectedDate], \"Select currency\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Currency i want\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"number\",\n            readOnly: true,\n            value: resultz\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), selectedDate && /*#__PURE__*/_jsxDEV(Form.Select, {\n            \"aria-label\": \"select-currency-to\",\n            value: selectedCurrencyTo,\n            onChange: e => setSelecteCurrencyTo(e.target.value.toString()),\n            children: renderSelections(data[selectedDate])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            color: \"white\",\n            backgroundColor: \"rgb(80, 51, 116)\",\n            border: \"rgb(80, 51, 116)\",\n            maxHeight: \"54px\"\n          },\n          onClick: () => onConvert(),\n          children: \"Convert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), logg.map(i => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrencyConverter, \"NO1csgrtW4+lLtTgckHFAetWU5k=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = CurrencyConverter;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"sources":["/Users/anndreadrivdahl/Desktop/currency-converter/src/Routes/CurrencyConverter.tsx"],"names":["React","useEffect","useState","Button","Form","useDispatch","useSelector","getExhangeData","setConversionResult","CurrencyConverter","data","state","exhangeRates","logg","history","resultz","converisionResult","valueToconvert","setValueToConvert","selectedDate","setSelectedDate","selectedCurrencyFrom","setSelecteCurrencyFrom","selectedCurrencyTo","setSelecteCurrencyTo","dispatch","renderSelections","object","selectLabel","list","key","value","Object","entries","push","onConvert","fromCurrency","fromRate","toCurrency","toRate","date","amount","backgroundColor","margin","borderRadius","padding","e","target","toString","display","justifyContent","parseInt","color","border","maxHeight","map","i","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../Store\";\nimport { getExhangeData, setConversionResult } from \"../Store/exchangeRates\";\nimport { ConversionHistory } from \"./ConversionHistory\";\n\n//TODO 1. Add validation on values\n//TODO 2. filter out selected currency from dropdown 1 in dropdown 2\n//TODO 3. cleaner rendering and component split\n//TODO 4. add loading state\n// TODO 5. styled components -> moe CSS out\n\nexport const CurrencyConverter = () => {\n  const data = useSelector((state: RootState) => state.exhangeRates.data);\n  const logg = useSelector((state: RootState) => state.exhangeRates.history);\n  const resultz = useSelector(\n    (state: RootState) => state.exhangeRates.converisionResult\n  );\n  const [valueToconvert, setValueToConvert] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [selectedCurrencyFrom, setSelecteCurrencyFrom] = useState(\"\");\n  const [selectedCurrencyTo, setSelecteCurrencyTo] = useState(\"\");\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getExhangeData());\n  }, [dispatch]);\n\n  const renderSelections = (object: any, selectLabel: string) => {\n    let list = [\n      <option key={\"select\"} value={\"select\"}>\n        {selectLabel}\n      </option>,\n    ];\n    for (const [key, value] of Object.entries(object)) {\n      list.push(\n        <option key={key} value={key}>\n          {key}\n        </option>\n      );\n    }\n    return list;\n  };\n\n  const onConvert = () => {\n    dispatch(\n      setConversionResult({\n        fromCurrency: selectedCurrencyFrom,\n        fromRate: data[selectedDate][selectedCurrencyFrom],\n        toCurrency: selectedCurrencyTo,\n        toRate: data[selectedDate][selectedCurrencyTo],\n        date: selectedDate,\n        amount: valueToconvert,\n      })\n    );\n  };\n\n  return (\n    <div>\n      <h1> Currency converter</h1>\n      <div\n        style={{\n          backgroundColor: \"#f5ecff\",\n          margin: \"64px\",\n          borderRadius: \"16px\",\n          padding: \"24px\",\n        }}\n      >\n        <h3> 1. Select date</h3>\n        <Form.Select\n          aria-label='select-date'\n          onChange={(e) => setSelectedDate(e.target.value.toString())}\n        >\n          {renderSelections(data, \"Select date\")}\n        </Form.Select>\n        <br></br>\n        <br></br>\n        <br></br>\n        <h3> 2. Select curriencies and amount to convert</h3>\n        <br></br>\n        <br></br>\n        <Form\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <Form.Group className='mb-3' controlId='Currency1' style={{}}>\n            <Form.Label>Currency i have</Form.Label>\n            <Form.Control\n              type='number'\n              placeholder='value'\n              onChange={(e) => setValueToConvert(parseInt(e.target.value))}\n              value={valueToconvert}\n            />\n            {selectedDate && (\n              <Form.Select\n                aria-label='select-currency-from'\n                value={selectedCurrencyFrom}\n                onChange={(e) =>\n                  setSelecteCurrencyFrom(e.target.value.toString())\n                }\n              >\n                {renderSelections(data[selectedDate], \"Select currency\")}\n              </Form.Select>\n            )}\n          </Form.Group>\n\n          <Form.Group className='mb-3' controlId='formBasicPassword'>\n            <Form.Label>Currency i want</Form.Label>\n            <Form.Control type='number' readOnly value={resultz} />\n            {selectedDate && (\n              <Form.Select\n                aria-label='select-currency-to'\n                value={selectedCurrencyTo}\n                onChange={(e) =>\n                  setSelecteCurrencyTo(e.target.value.toString())\n                }\n              >\n                {renderSelections(data[selectedDate])}\n              </Form.Select>\n            )}\n          </Form.Group>\n          <Button\n            style={{\n              color: \"white\",\n              backgroundColor: \"rgb(80, 51, 116)\",\n              border: \"rgb(80, 51, 116)\",\n              maxHeight: \"54px\",\n            }}\n            onClick={() => onConvert()}\n          >\n            Convert\n          </Button>\n        </Form>\n      </div>\n      {logg.map((i) => (\n        <p>{JSON.stringify(i)}</p>\n      ))}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}